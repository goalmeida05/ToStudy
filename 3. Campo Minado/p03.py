# -*- coding: utf-8 -*-
"""p03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RSYMSovpT8u3Hsmccm9U3MqA8cN21tiZ

INF101 - Introdução à Programação II  
2020/2  
**Prática 03 - Jogos com Matrizes - Campo Minado**  

---
- Autor: Gustavo de Oliveira Almeida 
- Matrícula: es86755
- Data: 18/02/2021
---

## Descrição

Este programa resolve o jogo campo minado, onde dada quantidade de bombas e o tamanho da matriz(informando a quantidade de linhas e colunas), o programa por meio de operações com matrizes irá calcular o valor de cada célula dada a quantidade de bombas próximas a ela.

# Campo Minado

Campo minado é um jogo popular de computador para um jogador. Foi inventado por Robert Donner em 1989 e tem como objetivo revelar um campo de minas explosivas sem que alguma seja detonada.

A área de jogo (tabuleiro) consiste em um campo de quadrados retangular (uma matriz). Cada célula contém:
- uma mina, ou
- um número indicando a quantidade de células adjacentes que contêm minas

Uma célula é adjacente a outra, se um dos pontos da lateral está conectado com um ponto da lateral de outra célula. Neste caso, cada célula pode ter até 8 células adjacentes:

1. superior à esquerda
2. superior ao centro
3. superior à direita
4. à esquerda
5. à direita
6. inferior à esquerda
7. inferior ao centro
8. inferior à direita

Na imagem a seguir, cada bandeira representa a posição de uma mina. Os números em cada célula representam a quantidade de minas nas células vizinhas. As células em branco indicam que não há minas nas células vizinhas.

![link text](https://content.instructables.com/ORIG/FFA/TFYY/G4PBXF6J/FFATFYYG4PBXF6J.jpg?frame=1)

Fontes: https://pt.wikipedia.org/wiki/Campo_minado

## Descrição da Atividade:

Nesta atividade, você deverá implementar as funções para:

1. criar o tabuleiro para o jogo 
2. usar a função de sorteio de posições para posicionar as bombas no tabuleiro
3. calcular o conteúdo de cada célula

As funções de:
- sorteio de posição `sorteiaPosicao ( tabuleiro, semente=None )`
- impressão de tabuleiro `imprimeTabuleiro ( tabuleiro )`
- e a função principal `main()` 

já estão prontas. **Não** faça modificações nelas.  
Você pode criar quantas funções auxiliares forem necessárias.

<font color='red'>Atenção:</font> Durante a implementação, as bombas são representadas por **-1** no tabuleiro.

## Objetivo da Atividade:

O objetivo da atividade é que vocês utilizem os conceitos de definição de matrizes, acesso de posição e lógica de programação. A ideia não é criar um jogo funcional, mas sim criar o tabuleiro e calcular o valor das células dadas as posições das minas.

## Saída desejada

Para um tabuleiro de tamanho 8 por 8 com 10 bombas posicionadas como se segue:

```
█ █ B █ █ █ █ █ 
█ B █ B █ █ █ █ 
B B █ █ █ █ █ █ 
B B █ █ █ █ █ █ 
B █ █ █ █ █ █ █ 
█ █ █ █ █ █ █ █ 
█ █ █ █ █ █ B █ 
█ █ █ █ █ █ █ B 
```

O resultado esperado é:

```
1 2 B 2 1 █ █ █ 
3 B 4 B 1 █ █ █ 
B B 4 1 1 █ █ █ 
B B 2 █ █ █ █ █ 
B 3 1 █ █ █ █ █ 
1 1 █ █ █ 1 1 1 
█ █ █ █ █ 1 B 2 
█ █ █ █ █ 1 2 B
```

# Solução
"""

import numpy as np
import random
from termcolor import colored

# Essa função imprime o tabuleiro utilizando formatação especial de caracteres.
# Os campos com valor zero são representados com o caracter █ em cinza, as 
# as bombas (-1) por B vermelho, e os demais são números simples. 
def imprimeTabuleiro ( tabuleiro ) :

  # print sem argumentos imprime uma linha vazia
  print()
  
  # Funcao len de um array 2D pega o número de linhas, exemplo len(arr)
  # Funcao len da primeira posição de um array 2D pega o número de colunas,
  # exemplo len(arr[0])
  num_linhas = len(tabuleiro)
  num_colunas = len(tabuleiro[0])
  for i in range( num_linhas ) :
    for j in range( num_colunas ) :
      if tabuleiro[i][j] == -1 :
        print( colored('B','red'), end=' ')
      elif tabuleiro[i][j] == 0 :
        print( colored('█','grey'), end=' ')
      else :
        print( colored(tabuleiro[i][j], 'cyan'), end=' ')
    print()

  # print sem argumentos imprime uma linha vazia
  print()

# Essa função sorteia de forma aleatória uma posição livre do tabuleiro e 
# retorna a linha i e coluna j que foram sorteadas. Você pode chamar a função 
# com dois parâmetros para evitar a aleatoriedade da função a cada chamada.
def sorteiaPosicao ( tabuleiro , semente=None ) :
  if semente is not None:
    random.seed(semente)
  num_linhas = len(tabuleiro)
  num_colunas = len(tabuleiro[0])
  while True :
    i = random.randint( 0, num_linhas-1 )
    j = random.randint( 0, num_colunas-1 )
    if tabuleiro[i][j] != -1 :
      break
  return i, j


# Inicializa com zeros um tabuleiro de tamanho definido 
def inicializaTabuleiro ( linhas, colunas ) :
  tabuleiro = np.zeros( (linhas, colunas), dtype=int )
  return tabuleiro


# Coloque a definicao aqui
def posicionaBombas ( quantidade, tabuleiro, semente=None ) :
  for k in range (0, quantidade):
    i, j = sorteiaPosicao(tabuleiro,semente)
    tabuleiro[i][j] = -1
  return tabuleiro


# Coloque a definicao aqui
def calculaTabuleiro ( tabuleiro ) :
  num_linhas = len(tabuleiro)
  num_colunas = len(tabuleiro[0])
  for i in range (0,num_linhas):
    for j in range (0, num_colunas):
      if tabuleiro[i][j] != -1:
        a,b=i,j
        sembombas(tabuleiro,a,b)
  return tabuleiro
        



def sembombas(tabuleiro,a,b):
  num_linhas = len(tabuleiro)
  num_colunas = len(tabuleiro[0])
  if a>0 and b>0:
    if tabuleiro[a-1][b-1] ==-1:
      tabuleiro[a][b] = tabuleiro[a][b]+1

  if a>0:
    if tabuleiro[a-1][b] ==-1:
      tabuleiro[a][b] = tabuleiro[a][b]+1

  if a>0 and b< num_colunas-1:
    if tabuleiro[a-1][b+1] ==-1:
      tabuleiro[a][b] = tabuleiro[a][b]+1

  if b>0:
    if tabuleiro[a][b-1] == -1:
      tabuleiro[a][b] = tabuleiro[a][b]+1

  if b<num_colunas-1:  
    if tabuleiro[a][b+1] == -1:
      tabuleiro[a][b] = tabuleiro[a][b]+1

  if a<num_linhas-1 and b>0:
    if tabuleiro[a+1][b-1] == -1: 
      tabuleiro[a][b] = tabuleiro[a][b]+1

  if a<num_linhas-1:
    if tabuleiro[a+1][b] == -1: 
      tabuleiro[a][b] = tabuleiro[a][b]+1

  if a<num_linhas-1 and b<num_colunas-1:
    if tabuleiro[a+1][b+1] == -1: 
      tabuleiro[a][b] = tabuleiro[a][b]+1

  return tabuleiro




# Coloque a definicao aqui
def main(numero_linhas, numero_colunas, numero_bombas) :
  tabuleiro = inicializaTabuleiro( numero_linhas, numero_colunas )
  posicionaBombas( numero_bombas, tabuleiro, 111 )
  imprimeTabuleiro( tabuleiro )
  calculaTabuleiro( tabuleiro )
  imprimeTabuleiro( tabuleiro )

numero_linhas = 8
numero_colunas = 8
numero_bombas = 10
main(numero_linhas, numero_colunas, numero_bombas)